name: dev_python_ml_runtime
cases:
  - id: sklearn_logreg_fit_predict
    requires_model: true
    requires_runtime: true
    prompt: |
      Create **two files** using the file fence convention:
      1) file: ml/train_sklearn.py -> trains a LogisticRegression on a synthetic binary dataset from sklearn.datasets.make_classification (n_samples=200).
         Save the model to model.pkl with joblib.
      2) file: tests/test_sklearn.py -> pytest test that loads model.pkl and checks accuracy >= 0.7 on a fresh synthetic test split.
      Use small sizes so the test is fast. Only fenced code with exact file paths.
    expect_files:
      - ml/train_sklearn.py
      - tests/test_sklearn.py
    commands:
      - python -m pip install -q scikit-learn==1.* joblib==1.* pytest==8.*
      - python ml/train_sklearn.py
      - pytest -q
    expect_stdout_regex:
      - "1 passed"

  - id: pytorch_tiny_regression
    requires_model: true
    requires_runtime: true
    prompt: |
      Create **two files** using the file fence convention:
      1) file: ml/train_torch.py -> trains a tiny PyTorch linear regression model y = 3x + noise for 200 samples and saves state_dict to torch_model.pt.
      2) file: tests/test_torch.py -> pytest test that loads the model, runs on a small tensor, and asserts MSE < 0.5 on synthetic data.
      Keep epochs/sizes tiny to run under a few seconds.
    expect_files:
      - ml/train_torch.py
      - tests/test_torch.py
    commands:
      - python -m pip install -q torch==2.* pytest==8.*
      - python ml/train_torch.py
      - pytest -q
    expect_stdout_regex:
      - "1 passed"
