name: dev_python_advanced
cases:
  - id: fastapi_simple_endpoint
    requires_model: true
    prompt: "Create a FastAPI app with one GET /health endpoint returning {'status':'ok'}. Provide only code in a fenced python block."
    expect_regex:
      - "```python"
      - "from\\s+fastapi\\s+import\\s+FastAPI"
      - "app\\s*=\\s*FastAPI\\(\\)"
      - "@app\\.get\\(\\s*[\"']/health[\"']\\s*\\)"
      - "return\\s*\\{\\s*[\"']status[\"']\\s*:\\s*[\"']ok[\"']\\s*\\}"
  - id: aiohttp_async_client
    requires_model: true
    prompt: "Write an asyncio function fetch_json(url) using aiohttp ClientSession with timeout and proper cleanup. Only fenced python code."
    expect_regex:
      - "import\\s+aiohttp"
      - "async\\s+def\\s+fetch_json\\("
      - "aiohttp\\.ClientSession\\("
      - "await\\s+resp\\.json\\("
      - "async\\s+with"
  - id: pydantic_model_validation
    requires_model: true
    prompt: "Define a Pydantic BaseModel User(name:str, email:str) with email validated using EmailStr. Only code block."
    expect_regex:
      - "from\\s+pydantic\\s+import\\s+BaseModel,\\s*EmailStr"
      - "class\\s+User\\(BaseModel\\)"
      - "email\\s*:\\s*EmailStr"
  - id: pytest_fixture_and_test
    requires_model: true
    prompt: "Provide a pytest test file with a fixture tmp_user() and a test that asserts user name equals 'alice'."
    expect_regex:
      - "import\\s+pytest"
      - "@pytest\\.fixture"
      - "def\\s+tmp_user\\("
      - "def\\s+test_"
      - "assert\\s+"
  - id: typing_protocol_strategy
    requires_model: true
    prompt: "Show a Python Protocol for a Cache with get(key:str)->str|None and set(key:str,value:str)->None and a concrete dict-backed implementation."
    expect_regex:
      - "from\\s+typing\\s+import\\s+Protocol"
      - "class\\s+Cache\\(Protocol\\)"
      - "def\\s+get\\("
      - "def\\s+set\\("
      - "class\\s+\\w+Cache\\("
      - "self\\.store"
  - id: cli_argparse
    requires_model: true
    prompt: "Create a small argparse CLI 'greet --name Alice' that prints 'Hello, Alice'."
    expect_regex:
      - "import\\s+argparse"
      - "parser\\s*=\\s*argparse\\.ArgumentParser"
      - "--name"
      - "print\\(\\s*f?\"?Hello"
  - id: logging_config_structured
    requires_model: true
    prompt: "Configure Python logging with a JSON formatter using logging.Formatter or dictConfig; include logger usage."
    expect_regex:
      - "import\\s+logging"
      - "getLogger\\("
      - "logger\\.info\\("
      - "Formatter|dictConfig"
  - id: sqlmodel_crud
    requires_model: true
    prompt: "Using SQLModel, define a simple model Todo(id, title) and a CRUD create/read function with Session."
    expect_regex:
      - "from\\s+sqlmodel\\s+import"
      - "class\\s+Todo\\(SQLModel"
      - "Session\\("
      - "select\\("
  - id: dockerfile_example
    requires_model: true
    prompt: "Provide a minimal Dockerfile for a FastAPI app using uvicorn, Python 3.11 slim, non-root user, PORT env."
    expect_regex:
      - "FROM\\s+python:3\\.11"
      - "RUN\\s+pip\\s+install"
      - "USER\\s+"
      - "CMD\\s*\\[\\s*\"uvicorn\""
  - id: security_secrets_env
    requires_model: true
    prompt: "Demonstrate reading secrets via environment variables with os.getenv and avoid printing the secret."
    expect_regex:
      - "import\\s+os"
      - "os\\.getenv\\("
      - "secret"

