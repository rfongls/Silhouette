import json
import os
import datetime as dt
from pathlib import Path
from skills.cyber_common import require_auth_and_scope, write_result, Deny


def tool(payload: str) -> str:
    """Validate authorization and scope before running pentest activity.

    Input JSON: {"target":"example.com","scope_file":"scope.txt","auth_doc":"auth.pdf","out_dir":"..."}
    """
    args = json.loads(payload or "{}")
    target = args.get("target", "")
    scope_file = args.get("scope_file", "scope.txt")
    auth_doc = args.get("auth_doc")
    out_dir = args.get("out_dir")
    user = os.environ.get("USER", "unknown")
    deny_path = os.environ.get("CYBER_DENY_LIST")
    window = os.environ.get("CYBER_PENTEST_WINDOW")
    try:
        if os.environ.get("CYBER_KILL_SWITCH", "").lower() in {"1", "true", "on"}:
            raise Deny("Global kill switch active")
        require_auth_and_scope(scope_file, target)
        if not auth_doc or not Path(auth_doc).exists():
            raise Deny("Authorization document required")
        if deny_path and Path(deny_path).exists():
            denied = {l.strip() for l in Path(deny_path).read_text().splitlines() if l.strip()}
            if target in denied:
                raise Deny("Target denied")
        if window:
            try:
                start_s, end_s = window.split("-", 1)
                now = dt.datetime.utcnow().time()
                start = dt.time.fromisoformat(start_s)
                end = dt.time.fromisoformat(end_s)
                if not (start <= now <= end):
                    raise Deny("Outside authorized window")
            except ValueError:
                pass
        data = {"target": target, "scope_file": scope_file, "auth_doc": auth_doc}
        path = write_result("pentest_gate", data, run_dir=out_dir)
        audit = {
            "target": target,
            "auth_doc": auth_doc,
            "decision": "allow",
            "user": user,
            "ts": dt.datetime.utcnow().isoformat(),
        }
        write_result("pentest_gate_audit", audit, run_dir=out_dir)
        return json.dumps({"ok": True, "result": path})
    except Deny as e:
        audit = {
            "target": target,
            "auth_doc": auth_doc,
            "decision": "deny",
            "reason": str(e),
            "user": user,
            "ts": dt.datetime.utcnow().isoformat(),
        }
        write_result("pentest_gate_audit", audit, run_dir=out_dir)
        return json.dumps({"ok": False, "deny": str(e)})
