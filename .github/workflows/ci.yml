name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dev deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Lint
      run: |
        ruff check .

    - name: Run unit tests with coverage
      run: |
        coverage run -m pytest --maxfail=1 --disable-warnings -q
        coverage xml
        coverage report --fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

    - name: Smoke-test CLI
      run: |
        python -m cli.main --no-repl
        printf ":replay\n:exit\n" | python -m cli.main | grep -q "Replayed"
        printf ":selfcheck\n:exit\n" | python -m cli.main | grep -q "Missing required files"
        printf ":backup\n:exit\n" | python -m cli.main | grep -q "Backup complete"

    - name: Self-deploy smoke
      run: |
        python -m silhouette_core.profile_exporter --output profile.json
        python -m silhouette_core.distiller --output distillate.json
        python -m silhouette_core.package_clone --profile profile.json --distillate distillate.json --version 1
        printf ":agent deploy tmp_deploy\n:exit\n" | python -m cli.main | grep -q "Deployed clone"

    - name: Doc-link check
      run: |
        pip install markdown-link-check
        markdown-link-check "docs/**/*.md"

  codex-training:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: pip install openai

    - name: Generate Data Prep Script
      uses: openai-codex/action@v1
      with:
        prompt: |
          "Write a Python script 'prepare_reasoning_data.py' that:
          - loads 'modules/{module}/embeddings/chunks.jsonl'
          - constructs a JSONL file of <prompt, completion> pairs
          - supports argparse: --module, --out"
        output_path: silhouette_core/prepare_reasoning_data.py

    - name: Generate Adapter Trainer
      uses: openai-codex/action@v1
      with:
        prompt: |
          "Write 'train_adapter.py' that:
          - accepts --base-model, --train-file, --method, --adapter-output
          - loads a Hugging Face LLM, applies LoRA or QLoRA via peft
          - fine-tunes on JSONL data and saves adapter weights"
        output_path: silhouette_core/train_adapter.py

    - name: Generate Quantizer
      uses: openai-codex/action@v1
      with:
        prompt: |
          "Write 'quantize_models.py' that:
          - takes --input and --bits
          - loads a model or adapter via bitsandbytes
          - dumps a quantized checkpoint"
        output_path: silhouette_core/quantize_models.py

    - name: Update Module Executor
      uses: openai-codex/action@v1
      with:
        prompt: |
          "Enhance 'module_executor.py' to:
          - load and run a quantized adapter using transformers + peft
          - execute generated Python in a sandbox subprocess"
        output_path: silhouette_core/module_executor.py

