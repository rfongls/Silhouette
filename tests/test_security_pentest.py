import json
import os
import subprocess
import sys
from pathlib import Path


def run(args, env=None, check=False):
    return subprocess.run(
        [sys.executable, "-m", "silhouette_core.cli"] + args,
        capture_output=True,
        text=True,
        check=check,
        env=env,
    )


def test_recon_denied_without_scope_ack(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "recon",
            "--target",
            "not-in-scope.example",
            "--scope-file",
            "docs/cyber/scope_example.txt",
        ],
        env=env,
    )
    combined = r.stdout + r.stderr
    assert r.returncode != 0
    assert "Denied" in combined or "not in scope" in combined


def test_recon_ok_with_scope_and_ack(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "recon",
            "--target",
            "sub.example.com",
            "--scope-file",
            "docs/cyber/scope_example.txt",
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    latest = max(Path("out/security").glob("2*"))
    recon_json = latest / "active" / "recon.json"
    assert recon_json.exists()


def test_recon_profile_version(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "recon",
            "--target",
            "sub.example.com",
            "--scope-file",
            "docs/cyber/scope_example.txt",
            "--profile",
            "version",
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    path = Path(r.stdout.strip())
    data = json.loads(path.read_text())
    assert data["profile"] == "version"
    assert any(s["port"] == 80 for s in data["inventory"]["services"])

def test_gate_ok_with_auth_and_scope(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    auth = tmp_path / "auth.pdf"
    auth.write_text("auth")
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "gate",
            "--target",
            "sub.example.com",
            "--scope-file",
            "docs/cyber/scope_example.txt",
            "--auth-doc",
            str(auth),
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    path = Path(r.stdout.strip())
    assert path.name == "pentest_gate.json"
    assert path.exists()
    audit = path.parent / "pentest_gate_audit.json"
    assert audit.exists()

def test_gate_denied_without_auth_doc(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    missing = tmp_path / "missing.pdf"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "gate",
            "--target",
            "sub.example.com",
            "--scope-file",
            "docs/cyber/scope_example.txt",
            "--auth-doc",
            str(missing),
        ],
        env=env,
    )
    combined = r.stdout + r.stderr
    assert r.returncode != 0
    assert "Authorization document" in combined


def test_gate_denied_out_of_scope(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    auth = tmp_path / "auth.pdf"
    auth.write_text("auth")
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "gate",
            "--target",
            "out.example.org",
            "--scope-file",
            "docs/cyber/scope_example.txt",
            "--auth-doc",
            str(auth),
        ],
        env=env,
    )
    combined = r.stdout + r.stderr
    assert r.returncode != 0
    assert "Denied" in combined or "not in scope" in combined


def test_playbook_creates_output(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "playbook",
            "--incident",
            "ransomware",
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    path = Path(r.stdout.strip())
    assert path.name == "ir_playbook.json"
    assert path.exists()
    data = json.loads(path.read_text())
    assert data["incident"] == "ransomware"
    assert "isolate_systems" in data["steps"]
    assert "communication_plan" in data
    assert "contacts" in data
    assert data["injects"]
    assert data["schedule"]


def test_playbook_credential(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "playbook",
            "--incident",
            "credential",
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    path = Path(r.stdout.strip())
    data = json.loads(path.read_text())
    assert data["incident"] == "credential"
    assert "reset_credentials" in data["steps"]
    assert any(i["inject"] for i in data["schedule"])


def test_gate_denied_when_kill_switch(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    env["CYBER_KILL_SWITCH"] = "1"
    auth = tmp_path / "auth.pdf"
    auth.write_text("auth")
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "gate",
            "--target",
            "sub.example.com",
            "--scope-file",
            "docs/cyber/scope_example.txt",
            "--auth-doc",
            str(auth),
        ],
        env=env,
    )
    combined = r.stdout + r.stderr
    assert r.returncode != 0
    assert "kill switch" in combined.lower()


def test_netforensics_creates_output(tmp_path):
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"
    pcap = tmp_path / "sample.pcap"
    # Minimal PCAP with one UDP packet (Ethernet/IPv4)
    pcap_bytes = (
        b"\xd4\xc3\xb2\xa1"  # magic
        b"\x02\x00\x04\x00"  # version major/minor
        b"\x00\x00\x00\x00"  # thiszone
        b"\x00\x00\x00\x00"  # sigfigs
        b"\xff\xff\x00\x00"  # snaplen
        b"\x01\x00\x00\x00"  # network (Ethernet)
        # packet header
        b"\x00\x00\x00\x00"  # ts_sec
        b"\x00\x00\x00\x00"  # ts_usec
        b"\x2a\x00\x00\x00"  # incl_len = 42
        b"\x2a\x00\x00\x00"  # orig_len = 42
        # ethernet header
        b"\xff\xff\xff\xff\xff\xff"  # dst mac
        b"\x00\x00\x00\x00\x00\x00"  # src mac
        b"\x08\x00"  # type IPv4
        # ipv4 header
        b"\x45\x00\x00\x1c\x00\x00\x40\x00\x40\x11\x00\x00"
        b"\x01\x02\x03\x04"  # src ip
        b"\x05\x06\x07\x08"  # dst ip
        # udp header
        b"\x04\xd2\x00\x35\x00\x08\x00\x00"
    )
    pcap.write_bytes(pcap_bytes)
    r = run(
        [
            "security",
            "--ack-authorized",
            "pentest",
            "netforensics",
            "--pcap",
            str(pcap),
        ],
        env=env,
        check=False,
    )
    assert r.returncode == 0
    path = Path(r.stdout.strip())
    assert path.name == "netforensics.json"
    assert path.exists()
    data = json.loads(path.read_text())
    assert data["packets"] == 1
    assert data["flows"] == 1
