import json, os, subprocess, sys, pathlib, time

REPO = pathlib.Path(__file__).resolve().parents[1]

def run(args, env=None, check=False):
    cmd = [sys.executable, '-m', 'silhouette_core.cli'] + args
    return subprocess.run(cmd, cwd=str(REPO), text=True, capture_output=True, env=env, check=check)

def ensure_seeds_and_scope():
    (REPO / 'data/security/seeds/cve').mkdir(parents=True, exist_ok=True)
    (REPO / 'data/security/seeds/kev').mkdir(parents=True, exist_ok=True)
    (REPO / 'docs/cyber').mkdir(parents=True, exist_ok=True)
    cve = REPO / 'data/security/seeds/cve/cve_seed.json'
    kev = REPO / 'data/security/seeds/kev/kev_seed.json'
    scope = REPO / 'docs/cyber/scope_example.txt'
    if not cve.exists():
        cve.write_text('{"CVE-0001":{"summary":"Demo CVE for offline tests","severity":5}}', encoding='utf-8')
    if not kev.exists():
        kev.write_text('{"cves":["CVE-0001"]}', encoding='utf-8')
    if not scope.exists():
        scope.write_text('example.com\n*.example.com\nsub.example.com\n', encoding='utf-8')

def test_gate_allow_and_audit():
    ensure_seeds_and_scope()
    auth = REPO / 'auth.pdf'
    auth.write_text('auth', encoding='utf-8')
    r = run(['security','--ack-authorized','pentest','gate',
             '--target','sub.example.com',
             '--scope-file','docs/cyber/scope_example.txt',
             '--auth-doc',str(auth)])
    assert r.returncode == 0, r.stderr + r.stdout
    out_path = pathlib.Path(r.stdout.strip())
    assert out_path.exists()
    data = json.loads(out_path.read_text(encoding='utf-8'))
    assert data['target'] == 'sub.example.com'

def test_recon_version_profile_kev_flag():
    ensure_seeds_and_scope()
    r = run(['security','--ack-authorized','pentest','recon',
             '--target','sub.example.com',
             '--scope-file','docs/cyber/scope_example.txt',
             '--profile','version'])
    assert r.returncode == 0, r.stderr + r.stdout
    recon_path = pathlib.Path(r.stdout.strip())
    payload = json.loads(recon_path.read_text(encoding='utf-8'))
    svc = next(s for s in payload['inventory']['services'] if s.get('service') == 'http')
    assert any(c.get('kev') for c in svc.get('cves', []))

def test_netforensics_stub():
    ensure_seeds_and_scope()
    pcap = REPO / 'sample.pcap'
    pcap.write_bytes(b'')
    r = run(['security','--ack-authorized','pentest','netforensics',
             '--pcap',str(pcap)])
    assert r.returncode == 0, r.stderr + r.stdout
    nf_path = pathlib.Path(r.stdout.strip())
    nf = json.loads(nf_path.read_text(encoding='utf-8'))
    assert 'flows' in nf and 'index' in nf

def test_ir_playbook_ransomware():
    ensure_seeds_and_scope()
    r = run(['security','--ack-authorized','pentest','playbook',
             '--incident','ransomware'])
    assert r.returncode == 0, r.stderr + r.stdout
    pb_path = pathlib.Path(r.stdout.strip())
    pb = json.loads(pb_path.read_text(encoding='utf-8'))
    assert pb['incident'] == 'ransomware'
